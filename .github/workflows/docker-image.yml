name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:

      - name: Checkout source
        uses: actions/checkout@v3

      - name: Run Prisma Cloud Scan
        id: prisma-cloud
        uses: bridgecrewio/checkov-action@master 
        env:
          PRISMA_API_URL: https://api4.prismacloud.io
        with:
          api-key: ${{ secrets.BC_API_KEY }}
          use_enforcement_rules: true

      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Build secure docker image
      #   run: docker build -t mathersb2j/vampi-secure:latest .
      # - name: Push secure image to docker hub
      #   run: docker push mathersb2j/vampi-secure:latest
      
      # - name: Build vulnerable docker image
      #   run: docker build -t mathersb2j/vampi-vulnerable:latest .
      # - name: Push vulnerable image to docker hub
      #   run: docker push mathersb2j/vampi-vulnerable:latest

      # AWS ECR Image Build/Push 
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push the image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deployment:
    needs: build
    runs-on: self-hosted
    steps:
      # - name: Pull secure image
      #   run: docker pull mathersb2j/vampi-secure:latest
      # - name: Pull vulnerable image
      #   run: docker pull mathersorg/vampi:latest
      # - name: Delete old secure container
      #   run: docker rm -f vampi-secure
      # - name: Delete old vulnerable container
      #   run: docker rm -f vampi-vulnerable
      # - name: Run secure docker container
      #   run: docker run -d -p 5000:5000 --name vampi-secure mathersb2j/vampi-secure:latest
      # - name: Run vulnerable docker container
      #   run: docker run -u root:root -d -p 5000:5000 --name vampi-vulnerable mathersb2j/vampi-vulnerable:latest
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Pull container image from ECR and deploy to EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_ACCESS_KEY_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.REPO_NAME }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          sudo aws ecr get-login --no-include-email --region us-east-1
          sudo docker pull $ECR_REGISTRY/$ECR_REPOSITORY:latest
          sudo docker stop vampi-vulnerable || true
          sudo docker rm vampi-vulnerable || true
          sudo docker run -u root:root -d -p 5000:5000 --name vampi-vulnerable $ECR_REGISTRY/$ECR_REPOSITORY:latest

